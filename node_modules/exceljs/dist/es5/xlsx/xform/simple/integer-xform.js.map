{"version":3,"sources":["../../../../../lib/xlsx/xform/simple/integer-xform.js"],"names":["utils","require","BaseXform","IntegerXform","module","exports","options","tag","attr","attrs","zero","inherits","render","xmlStream","model","openNode","addAttributes","addAttribute","writeText","closeNode","parseOpen","node","name","parseInt","attributes","text","parseText","push","parseClose","join"],"mappings":"AAAA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAME,YAAY,GAAIC,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AACvD,OAAKC,GAAL,GAAWD,OAAO,CAACC,GAAnB;AACA,OAAKC,IAAL,GAAYF,OAAO,CAACE,IAApB;AACA,OAAKC,KAAL,GAAaH,OAAO,CAACG,KAArB,CAHuD,CAKvD;;AACA,OAAKC,IAAL,GAAYJ,OAAO,CAACI,IAApB;AACD,CAPD;;AASAV,KAAK,CAACW,QAAN,CAAeR,YAAf,EAA6BD,SAA7B,EAAwC;AACtCU,EAAAA,MADsC,kBAC/BC,SAD+B,EACpBC,KADoB,EACb;AACvB;AACA,QAAIA,KAAK,IAAI,KAAKJ,IAAlB,EAAwB;AACtBG,MAAAA,SAAS,CAACE,QAAV,CAAmB,KAAKR,GAAxB;;AACA,UAAI,KAAKE,KAAT,EAAgB;AACdI,QAAAA,SAAS,CAACG,aAAV,CAAwB,KAAKP,KAA7B;AACD;;AACD,UAAI,KAAKD,IAAT,EAAe;AACbK,QAAAA,SAAS,CAACI,YAAV,CAAuB,KAAKT,IAA5B,EAAkCM,KAAlC;AACD,OAFD,MAEO;AACLD,QAAAA,SAAS,CAACK,SAAV,CAAoBJ,KAApB;AACD;;AACDD,MAAAA,SAAS,CAACM,SAAV;AACD;AACF,GAfqC;AAiBtCC,EAAAA,SAjBsC,qBAiB5BC,IAjB4B,EAiBtB;AACd,QAAIA,IAAI,CAACC,IAAL,KAAc,KAAKf,GAAvB,EAA4B;AAC1B,UAAI,KAAKC,IAAT,EAAe;AACb,aAAKM,KAAL,GAAaS,QAAQ,CAACF,IAAI,CAACG,UAAL,CAAgB,KAAKhB,IAArB,CAAD,EAA6B,EAA7B,CAArB;AACD,OAFD,MAEO;AACL,aAAKiB,IAAL,GAAY,EAAZ;AACD;;AACD,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GA3BqC;AA4BtCC,EAAAA,SA5BsC,qBA4B5BD,IA5B4B,EA4BtB;AACd,QAAI,CAAC,KAAKjB,IAAV,EAAgB;AACd,WAAKiB,IAAL,CAAUE,IAAV,CAAeF,IAAf;AACD;AACF,GAhCqC;AAiCtCG,EAAAA,UAjCsC,wBAiCzB;AACX,QAAI,CAAC,KAAKpB,IAAV,EAAgB;AACd,WAAKM,KAAL,GAAaS,QAAQ,CAAC,KAAKE,IAAL,CAAUI,IAAV,CAAe,EAAf,KAAsB,CAAvB,EAA0B,EAA1B,CAArB;AACD;;AACD,WAAO,KAAP;AACD;AAtCqC,CAAxC","sourcesContent":["'use strict';\n\nconst utils = require('../../../utils/utils');\nconst BaseXform = require('../base-xform');\n\nconst IntegerXform = (module.exports = function(options) {\n  this.tag = options.tag;\n  this.attr = options.attr;\n  this.attrs = options.attrs;\n\n  // option to render zero\n  this.zero = options.zero;\n});\n\nutils.inherits(IntegerXform, BaseXform, {\n  render(xmlStream, model) {\n    // int is different to float in that zero is not rendered\n    if (model || this.zero) {\n      xmlStream.openNode(this.tag);\n      if (this.attrs) {\n        xmlStream.addAttributes(this.attrs);\n      }\n      if (this.attr) {\n        xmlStream.addAttribute(this.attr, model);\n      } else {\n        xmlStream.writeText(model);\n      }\n      xmlStream.closeNode();\n    }\n  },\n\n  parseOpen(node) {\n    if (node.name === this.tag) {\n      if (this.attr) {\n        this.model = parseInt(node.attributes[this.attr], 10);\n      } else {\n        this.text = [];\n      }\n      return true;\n    }\n    return false;\n  },\n  parseText(text) {\n    if (!this.attr) {\n      this.text.push(text);\n    }\n  },\n  parseClose() {\n    if (!this.attr) {\n      this.model = parseInt(this.text.join('') || 0, 10);\n    }\n    return false;\n  },\n});\n"],"file":"integer-xform.js"}
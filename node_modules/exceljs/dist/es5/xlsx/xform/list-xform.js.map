{"version":3,"sources":["../../../../lib/xlsx/xform/list-xform.js"],"names":["BaseXform","require","ListXform","options","tag","count","empty","$count","$","childXform","maxItems","model","forEach","childModel","prepare","xmlStream","length","openNode","addAttribute","render","closeNode","leafNode","node","parser","parseOpen","name","text","parseText","parseClose","push","undefined","Error","reconcile","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;;IAEMC,S;;;;;AACJ,qBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB;AAEA,UAAKC,GAAL,GAAWD,OAAO,CAACC,GAAnB;AACA,UAAKC,KAAL,GAAaF,OAAO,CAACE,KAArB;AACA,UAAKC,KAAL,GAAaH,OAAO,CAACG,KAArB;AACA,UAAKC,MAAL,GAAcJ,OAAO,CAACI,MAAR,IAAkB,OAAhC;AACA,UAAKC,CAAL,GAASL,OAAO,CAACK,CAAjB;AACA,UAAKC,UAAL,GAAkBN,OAAO,CAACM,UAA1B;AACA,UAAKC,QAAL,GAAgBP,OAAO,CAACO,QAAxB;AATmB;AAUpB;;;;4BAEOC,K,EAAOR,O,EAAS;AAAA,UACfM,UADe,GACD,IADC,CACfA,UADe;;AAEtB,UAAIE,KAAJ,EAAW;AACTA,QAAAA,KAAK,CAACC,OAAN,CAAc,UAAAC,UAAU,EAAI;AAC1BJ,UAAAA,UAAU,CAACK,OAAX,CAAmBD,UAAnB,EAA+BV,OAA/B;AACD,SAFD;AAGD;AACF;;;2BAEMY,S,EAAWJ,K,EAAO;AACvB,UAAIA,KAAK,IAAIA,KAAK,CAACK,MAAnB,EAA2B;AACzBD,QAAAA,SAAS,CAACE,QAAV,CAAmB,KAAKb,GAAxB,EAA6B,KAAKI,CAAlC;;AACA,YAAI,KAAKH,KAAT,EAAgB;AACdU,UAAAA,SAAS,CAACG,YAAV,CAAuB,KAAKX,MAA5B,EAAoCI,KAAK,CAACK,MAA1C;AACD;;AAJwB,YAMlBP,UANkB,GAMJ,IANI,CAMlBA,UANkB;AAOzBE,QAAAA,KAAK,CAACC,OAAN,CAAc,UAAAC,UAAU,EAAI;AAC1BJ,UAAAA,UAAU,CAACU,MAAX,CAAkBJ,SAAlB,EAA6BF,UAA7B;AACD,SAFD;AAIAE,QAAAA,SAAS,CAACK,SAAV;AACD,OAZD,MAYO,IAAI,KAAKd,KAAT,EAAgB;AACrBS,QAAAA,SAAS,CAACM,QAAV,CAAmB,KAAKjB,GAAxB;AACD;AACF;;;8BAESkB,I,EAAM;AACd,UAAI,KAAKC,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYC,SAAZ,CAAsBF,IAAtB;AACA,eAAO,IAAP;AACD;;AACD,cAAQA,IAAI,CAACG,IAAb;AACE,aAAK,KAAKrB,GAAV;AACE,eAAKO,KAAL,GAAa,EAAb;AACA,iBAAO,IAAP;;AACF;AACE,cAAI,KAAKF,UAAL,CAAgBe,SAAhB,CAA0BF,IAA1B,CAAJ,EAAqC;AACnC,iBAAKC,MAAL,GAAc,KAAKd,UAAnB;AACA,mBAAO,IAAP;AACD;;AACD,iBAAO,KAAP;AATJ;AAWD;;;8BAESiB,I,EAAM;AACd,UAAI,KAAKH,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYI,SAAZ,CAAsBD,IAAtB;AACD;AACF;;;+BAEUD,I,EAAM;AACf,UAAI,KAAKF,MAAT,EAAiB;AACf,YAAI,CAAC,KAAKA,MAAL,CAAYK,UAAZ,CAAuBH,IAAvB,CAAL,EAAmC;AACjC,eAAKd,KAAL,CAAWkB,IAAX,CAAgB,KAAKN,MAAL,CAAYZ,KAA5B;AACA,eAAKY,MAAL,GAAcO,SAAd;;AAEA,cAAI,KAAKpB,QAAL,IAAiB,KAAKC,KAAL,CAAWK,MAAX,GAAoB,KAAKN,QAA9C,EAAwD;AACtD,kBAAM,IAAIqB,KAAJ,eAAiB,KAAKtB,UAAL,CAAgBL,GAAjC,qBAAN;AACD;AACF;;AACD,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD;;;8BAESO,K,EAAOR,O,EAAS;AACxB,UAAIQ,KAAJ,EAAW;AAAA,YACFF,UADE,GACY,IADZ,CACFA,UADE;AAETE,QAAAA,KAAK,CAACC,OAAN,CAAc,UAAAC,UAAU,EAAI;AAC1BJ,UAAAA,UAAU,CAACuB,SAAX,CAAqBnB,UAArB,EAAiCV,OAAjC;AACD,SAFD;AAGD;AACF;;;;EAtFqBH,S;;AAyFxBiC,MAAM,CAACC,OAAP,GAAiBhC,SAAjB","sourcesContent":["'use strict';\n\nconst BaseXform = require('./base-xform');\n\nclass ListXform extends BaseXform {\n  constructor(options) {\n    super();\n\n    this.tag = options.tag;\n    this.count = options.count;\n    this.empty = options.empty;\n    this.$count = options.$count || 'count';\n    this.$ = options.$;\n    this.childXform = options.childXform;\n    this.maxItems = options.maxItems;\n  }\n\n  prepare(model, options) {\n    const {childXform} = this;\n    if (model) {\n      model.forEach(childModel => {\n        childXform.prepare(childModel, options);\n      });\n    }\n  }\n\n  render(xmlStream, model) {\n    if (model && model.length) {\n      xmlStream.openNode(this.tag, this.$);\n      if (this.count) {\n        xmlStream.addAttribute(this.$count, model.length);\n      }\n\n      const {childXform} = this;\n      model.forEach(childModel => {\n        childXform.render(xmlStream, childModel);\n      });\n\n      xmlStream.closeNode();\n    } else if (this.empty) {\n      xmlStream.leafNode(this.tag);\n    }\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case this.tag:\n        this.model = [];\n        return true;\n      default:\n        if (this.childXform.parseOpen(node)) {\n          this.parser = this.childXform;\n          return true;\n        }\n        return false;\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.push(this.parser.model);\n        this.parser = undefined;\n\n        if (this.maxItems && this.model.length > this.maxItems) {\n          throw new Error(`Max ${this.childXform.tag} count exceeded`);\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  reconcile(model, options) {\n    if (model) {\n      const {childXform} = this;\n      model.forEach(childModel => {\n        childXform.reconcile(childModel, options);\n      });\n    }\n  }\n}\n\nmodule.exports = ListXform;\n"],"file":"list-xform.js"}
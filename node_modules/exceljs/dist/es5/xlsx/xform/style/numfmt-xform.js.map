{"version":3,"sources":["../../../../../lib/xlsx/xform/style/numfmt-xform.js"],"names":["_","require","utils","defaultNumFormats","BaseXform","hashDefaultFormats","hash","each","dnf","id","f","parseInt","defaultFmtHash","NumFmtXform","module","exports","formatCode","inherits","tag","getDefaultFmtId","getDefaultFmtCode","numFmtId","render","xmlStream","model","leafNode","parseOpen","node","name","attributes","replace","parseText","parseClose"],"mappings":"AAAA;;AAEA,IAAMA,CAAC,GAAGC,OAAO,CAAC,2BAAD,CAAjB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAME,iBAAiB,GAAGF,OAAO,CAAC,yBAAD,CAAjC;;AAEA,IAAMG,SAAS,GAAGH,OAAO,CAAC,eAAD,CAAzB;;AAEA,SAASI,kBAAT,GAA8B;AAC5B,MAAMC,IAAI,GAAG,EAAb;;AACAN,EAAAA,CAAC,CAACO,IAAF,CAAOJ,iBAAP,EAA0B,UAACK,GAAD,EAAMC,EAAN,EAAa;AACrC,QAAID,GAAG,CAACE,CAAR,EAAW;AACTJ,MAAAA,IAAI,CAACE,GAAG,CAACE,CAAL,CAAJ,GAAcC,QAAQ,CAACF,EAAD,EAAK,EAAL,CAAtB;AACD,KAHoC,CAIrC;;AACD,GALD;;AAMA,SAAOH,IAAP;AACD;;AACD,IAAMM,cAAc,GAAGP,kBAAkB,EAAzC,C,CAEA;;AACA,IAAMQ,WAAW,GAAIC,MAAM,CAACC,OAAP,GAAiB,UAASN,EAAT,EAAaO,UAAb,EAAyB;AAC7D,OAAKP,EAAL,GAAUA,EAAV;AACA,OAAKO,UAAL,GAAkBA,UAAlB;AACD,CAHD;;AAKAd,KAAK,CAACe,QAAN,CACEJ,WADF,EAEET,SAFF,EAGE;AACE,MAAIc,GAAJ,GAAU;AACR,WAAO,QAAP;AACD,GAHH;;AAKEC,EAAAA,eALF,2BAKkBH,UALlB,EAK8B;AAC1B,WAAOJ,cAAc,CAACI,UAAD,CAArB;AACD,GAPH;AAQEI,EAAAA,iBARF,6BAQoBC,QARpB,EAQ8B;AAC1B,WAAOlB,iBAAiB,CAACkB,QAAD,CAAjB,IAA+BlB,iBAAiB,CAACkB,QAAD,CAAjB,CAA4BX,CAAlE;AACD;AAVH,CAHF,EAeE;AACEY,EAAAA,MADF,kBACSC,SADT,EACoBC,KADpB,EAC2B;AACvBD,IAAAA,SAAS,CAACE,QAAV,CAAmB,QAAnB,EAA6B;AAAEJ,MAAAA,QAAQ,EAAEG,KAAK,CAACf,EAAlB;AAAsBO,MAAAA,UAAU,EAAEQ,KAAK,CAACR;AAAxC,KAA7B;AACD,GAHH;AAIEU,EAAAA,SAJF,qBAIYC,IAJZ,EAIkB;AACd,YAAQA,IAAI,CAACC,IAAb;AACE,WAAK,QAAL;AACE,aAAKJ,KAAL,GAAa;AACXf,UAAAA,EAAE,EAAEE,QAAQ,CAACgB,IAAI,CAACE,UAAL,CAAgBR,QAAjB,EAA2B,EAA3B,CADD;AAEXL,UAAAA,UAAU,EAAEW,IAAI,CAACE,UAAL,CAAgBb,UAAhB,CAA2Bc,OAA3B,CAAmC,UAAnC,EAA+C,IAA/C;AAFD,SAAb;AAIA,eAAO,IAAP;;AACF;AACE,eAAO,KAAP;AARJ;AAUD,GAfH;AAgBEC,EAAAA,SAhBF,uBAgBc,CAAE,CAhBhB;AAiBEC,EAAAA,UAjBF,wBAiBe;AACX,WAAO,KAAP;AACD;AAnBH,CAfF","sourcesContent":["'use strict';\n\nconst _ = require('../../../utils/under-dash');\nconst utils = require('../../../utils/utils');\nconst defaultNumFormats = require('../../defaultnumformats');\n\nconst BaseXform = require('../base-xform');\n\nfunction hashDefaultFormats() {\n  const hash = {};\n  _.each(defaultNumFormats, (dnf, id) => {\n    if (dnf.f) {\n      hash[dnf.f] = parseInt(id, 10);\n    }\n    // at some point, add the other cultures here...\n  });\n  return hash;\n}\nconst defaultFmtHash = hashDefaultFormats();\n\n// NumFmt encapsulates translation between number format and xlsx\nconst NumFmtXform = (module.exports = function(id, formatCode) {\n  this.id = id;\n  this.formatCode = formatCode;\n});\n\nutils.inherits(\n  NumFmtXform,\n  BaseXform,\n  {\n    get tag() {\n      return 'numFmt';\n    },\n\n    getDefaultFmtId(formatCode) {\n      return defaultFmtHash[formatCode];\n    },\n    getDefaultFmtCode(numFmtId) {\n      return defaultNumFormats[numFmtId] && defaultNumFormats[numFmtId].f;\n    },\n  },\n  {\n    render(xmlStream, model) {\n      xmlStream.leafNode('numFmt', { numFmtId: model.id, formatCode: model.formatCode });\n    },\n    parseOpen(node) {\n      switch (node.name) {\n        case 'numFmt':\n          this.model = {\n            id: parseInt(node.attributes.numFmtId, 10),\n            formatCode: node.attributes.formatCode.replace(/[\\\\](.)/g, '$1'),\n          };\n          return true;\n        default:\n          return false;\n      }\n    },\n    parseText() {},\n    parseClose() {\n      return false;\n    },\n  }\n);\n"],"file":"numfmt-xform.js"}
{"version":3,"sources":["../../../../../lib/xlsx/xform/style/border-xform.js"],"names":["utils","require","BaseXform","ColorXform","EdgeXform","name","map","color","inherits","tag","render","xmlStream","model","defaultColor","openNode","style","addAttribute","closeNode","parseOpen","node","parser","attributes","undefined","parseText","text","parseClose","validStyleValues","reduce","p","v","validStyle","value","BorderXform","module","exports","top","left","bottom","right","diagonal","up","down","add","edgeModel","edgeXform","Object","assign","reset","diagonalUp","diagonalDown","key","extensions"],"mappings":"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","sourcesContent":["'use strict';\n\nconst utils = require('../../../utils/utils');\nconst BaseXform = require('../base-xform');\n\nconst ColorXform = require('./color-xform');\n\nconst EdgeXform = function(name) {\n  this.name = name;\n  this.map = {\n    color: new ColorXform(),\n  };\n};\n\nutils.inherits(EdgeXform, BaseXform, {\n  get tag() {\n    return this.name;\n  },\n\n  render(xmlStream, model, defaultColor) {\n    const color = (model && model.color) || defaultColor || this.defaultColor;\n    xmlStream.openNode(this.name);\n    if (model && model.style) {\n      xmlStream.addAttribute('style', model.style);\n      if (color) {\n        this.map.color.render(xmlStream, color);\n      }\n    }\n    xmlStream.closeNode();\n  },\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case this.name: {\n        const { style } = node.attributes;\n        if (style) {\n          this.model = {\n            style,\n          };\n        } else {\n          this.model = undefined;\n        }\n        return true;\n      }\n      case 'color':\n        this.parser = this.map.color;\n        this.parser.parseOpen(node);\n        return true;\n      default:\n        return false;\n    }\n  },\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.parser = undefined;\n      }\n      return true;\n    }\n\n    if (name === this.name) {\n      if (this.map.color.model) {\n        if (!this.model) {\n          this.model = {};\n        }\n        this.model.color = this.map.color.model;\n      }\n    }\n\n    return false;\n  },\n\n  validStyleValues: [\n    'thin',\n    'dotted',\n    'dashDot',\n    'hair',\n    'dashDotDot',\n    'slantDashDot',\n    'mediumDashed',\n    'mediumDashDotDot',\n    'mediumDashDot',\n    'medium',\n    'double',\n    'thick',\n  ].reduce((p, v) => {\n    p[v] = true;\n    return p;\n  }, {}),\n  validStyle(value) {\n    return this.validStyleValues[value];\n  },\n});\n\n// Border encapsulates translation from border model to/from xlsx\nconst BorderXform = (module.exports = function() {\n  this.map = {\n    top: new EdgeXform('top'),\n    left: new EdgeXform('left'),\n    bottom: new EdgeXform('bottom'),\n    right: new EdgeXform('right'),\n    diagonal: new EdgeXform('diagonal'),\n  };\n});\n\nutils.inherits(BorderXform, BaseXform, {\n  render(xmlStream, model) {\n    const { color } = model;\n    xmlStream.openNode('border');\n    if (model.diagonal && model.diagonal.style) {\n      if (model.diagonal.up) {\n        xmlStream.addAttribute('diagonalUp', '1');\n      }\n      if (model.diagonal.down) {\n        xmlStream.addAttribute('diagonalDown', '1');\n      }\n    }\n    function add(edgeModel, edgeXform) {\n      if (edgeModel && !edgeModel.color && model.color) {\n        // don't mess with incoming models\n        edgeModel = Object.assign({}, edgeModel, { color: model.color });\n      }\n      edgeXform.render(xmlStream, edgeModel, color);\n    }\n    add(model.left, this.map.left);\n    add(model.right, this.map.right);\n    add(model.top, this.map.top);\n    add(model.bottom, this.map.bottom);\n    add(model.diagonal, this.map.diagonal);\n\n    xmlStream.closeNode();\n  },\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case 'border':\n        this.reset();\n        this.diagonalUp = !!node.attributes.diagonalUp;\n        this.diagonalDown = !!node.attributes.diagonalDown;\n        return true;\n      default:\n        this.parser = this.map[node.name];\n        if (this.parser) {\n          this.parser.parseOpen(node);\n          return true;\n        }\n        return false;\n    }\n  },\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.parser = undefined;\n      }\n      return true;\n    }\n    if (name === 'border') {\n      const model = (this.model = {});\n      const add = function(key, edgeModel, extensions) {\n        if (edgeModel) {\n          if (extensions) {\n            Object.assign(edgeModel, extensions);\n          }\n          model[key] = edgeModel;\n        }\n      };\n      add('left', this.map.left.model);\n      add('right', this.map.right.model);\n      add('top', this.map.top.model);\n      add('bottom', this.map.bottom.model);\n      add('diagonal', this.map.diagonal.model, { up: this.diagonalUp, down: this.diagonalDown });\n    }\n    return false;\n  },\n});\n"],"file":"border-xform.js"}
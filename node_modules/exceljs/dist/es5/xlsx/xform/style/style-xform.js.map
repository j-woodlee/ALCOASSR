{"version":3,"sources":["../../../../../lib/xlsx/xform/style/style-xform.js"],"names":["utils","require","BaseXform","AlignmentXform","StyleXform","module","exports","options","xfId","map","alignment","inherits","tag","render","xmlStream","model","openNode","numFmtId","fontId","fillId","borderId","addAttribute","closeNode","parseOpen","node","parser","name","parseInt","attributes","parseText","text","parseClose","undefined"],"mappings":"AAAA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAME,cAAc,GAAGF,OAAO,CAAC,mBAAD,CAA9B,C,CAEA;AACA;AACA;AAEA;;;AACA,IAAMG,UAAU,GAAIC,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AACrD,OAAKC,IAAL,GAAY,CAAC,EAAED,OAAO,IAAIA,OAAO,CAACC,IAArB,CAAb;AACA,OAAKC,GAAL,GAAW;AACTC,IAAAA,SAAS,EAAE,IAAIP,cAAJ;AADF,GAAX;AAGD,CALD;;AAOAH,KAAK,CAACW,QAAN,CAAeP,UAAf,EAA2BF,SAA3B,EAAsC;AACpC,MAAIU,GAAJ,GAAU;AACR,WAAO,IAAP;AACD,GAHmC;;AAKpCC,EAAAA,MALoC,kBAK7BC,SAL6B,EAKlBC,KALkB,EAKX;AACvBD,IAAAA,SAAS,CAACE,QAAV,CAAmB,IAAnB,EAAyB;AACvBC,MAAAA,QAAQ,EAAEF,KAAK,CAACE,QAAN,IAAkB,CADL;AAEvBC,MAAAA,MAAM,EAAEH,KAAK,CAACG,MAAN,IAAgB,CAFD;AAGvBC,MAAAA,MAAM,EAAEJ,KAAK,CAACI,MAAN,IAAgB,CAHD;AAIvBC,MAAAA,QAAQ,EAAEL,KAAK,CAACK,QAAN,IAAkB;AAJL,KAAzB;;AAMA,QAAI,KAAKZ,IAAT,EAAe;AACbM,MAAAA,SAAS,CAACO,YAAV,CAAuB,MAAvB,EAA+BN,KAAK,CAACP,IAAN,IAAc,CAA7C;AACD;;AAED,QAAIO,KAAK,CAACE,QAAV,EAAoB;AAClBH,MAAAA,SAAS,CAACO,YAAV,CAAuB,mBAAvB,EAA4C,GAA5C;AACD;;AACD,QAAIN,KAAK,CAACG,MAAV,EAAkB;AAChBJ,MAAAA,SAAS,CAACO,YAAV,CAAuB,WAAvB,EAAoC,GAApC;AACD;;AACD,QAAIN,KAAK,CAACI,MAAV,EAAkB;AAChBL,MAAAA,SAAS,CAACO,YAAV,CAAuB,WAAvB,EAAoC,GAApC;AACD;;AACD,QAAIN,KAAK,CAACK,QAAV,EAAoB;AAClBN,MAAAA,SAAS,CAACO,YAAV,CAAuB,aAAvB,EAAsC,GAAtC;AACD;;AAED,QAAIN,KAAK,CAACL,SAAV,EAAqB;AACnBI,MAAAA,SAAS,CAACO,YAAV,CAAuB,gBAAvB,EAAyC,GAAzC;AACA,WAAKZ,GAAL,CAASC,SAAT,CAAmBG,MAAnB,CAA0BC,SAA1B,EAAqCC,KAAK,CAACL,SAA3C;AACD;;AAEDI,IAAAA,SAAS,CAACQ,SAAV;AACD,GAnCmC;AAqCpCC,EAAAA,SArCoC,qBAqC1BC,IArC0B,EAqCpB;AACd,QAAI,KAAKC,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYF,SAAZ,CAAsBC,IAAtB;AACA,aAAO,IAAP;AACD,KAJa,CAKd;;;AACA,YAAQA,IAAI,CAACE,IAAb;AACE,WAAK,IAAL;AACE,aAAKX,KAAL,GAAa;AACXE,UAAAA,QAAQ,EAAEU,QAAQ,CAACH,IAAI,CAACI,UAAL,CAAgBX,QAAjB,EAA2B,EAA3B,CADP;AAEXC,UAAAA,MAAM,EAAES,QAAQ,CAACH,IAAI,CAACI,UAAL,CAAgBV,MAAjB,EAAyB,EAAzB,CAFL;AAGXC,UAAAA,MAAM,EAAEQ,QAAQ,CAACH,IAAI,CAACI,UAAL,CAAgBT,MAAjB,EAAyB,EAAzB,CAHL;AAIXC,UAAAA,QAAQ,EAAEO,QAAQ,CAACH,IAAI,CAACI,UAAL,CAAgBR,QAAjB,EAA2B,EAA3B;AAJP,SAAb;;AAMA,YAAI,KAAKZ,IAAT,EAAe;AACb,eAAKO,KAAL,CAAWP,IAAX,GAAkBmB,QAAQ,CAACH,IAAI,CAACI,UAAL,CAAgBpB,IAAjB,EAAuB,EAAvB,CAA1B;AACD;;AACD,eAAO,IAAP;;AACF,WAAK,WAAL;AACE,aAAKiB,MAAL,GAAc,KAAKhB,GAAL,CAASC,SAAvB;AACA,aAAKe,MAAL,CAAYF,SAAZ,CAAsBC,IAAtB;AACA,eAAO,IAAP;;AACF;AACE,eAAO,KAAP;AAjBJ;AAmBD,GA9DmC;AA+DpCK,EAAAA,SA/DoC,qBA+D1BC,IA/D0B,EA+DpB;AACd,QAAI,KAAKL,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYI,SAAZ,CAAsBC,IAAtB;AACD;AACF,GAnEmC;AAoEpCC,EAAAA,UApEoC,sBAoEzBL,IApEyB,EAoEnB;AACf,QAAI,KAAKD,MAAT,EAAiB;AACf,UAAI,CAAC,KAAKA,MAAL,CAAYM,UAAZ,CAAuBL,IAAvB,CAAL,EAAmC;AACjC,aAAKX,KAAL,CAAWL,SAAX,GAAuB,KAAKe,MAAL,CAAYV,KAAnC;AACA,aAAKU,MAAL,GAAcO,SAAd;AACD;;AACD,aAAO,IAAP;AACD;;AACD,WAAON,IAAI,KAAK,IAAhB;AACD;AA7EmC,CAAtC","sourcesContent":["'use strict';\n\nconst utils = require('../../../utils/utils');\nconst BaseXform = require('../base-xform');\n\nconst AlignmentXform = require('./alignment-xform');\n\n// <xf numFmtId=\"[numFmtId]\" fontId=\"[fontId]\" fillId=\"[fillId]\" borderId=\"[xf.borderId]\" xfId=\"[xfId]\">\n//   Optional <alignment>\n// </xf>\n\n// Style assists translation from style model to/from xlsx\nconst StyleXform = (module.exports = function(options) {\n  this.xfId = !!(options && options.xfId);\n  this.map = {\n    alignment: new AlignmentXform(),\n  };\n});\n\nutils.inherits(StyleXform, BaseXform, {\n  get tag() {\n    return 'xf';\n  },\n\n  render(xmlStream, model) {\n    xmlStream.openNode('xf', {\n      numFmtId: model.numFmtId || 0,\n      fontId: model.fontId || 0,\n      fillId: model.fillId || 0,\n      borderId: model.borderId || 0,\n    });\n    if (this.xfId) {\n      xmlStream.addAttribute('xfId', model.xfId || 0);\n    }\n\n    if (model.numFmtId) {\n      xmlStream.addAttribute('applyNumberFormat', '1');\n    }\n    if (model.fontId) {\n      xmlStream.addAttribute('applyFont', '1');\n    }\n    if (model.fillId) {\n      xmlStream.addAttribute('applyFill', '1');\n    }\n    if (model.borderId) {\n      xmlStream.addAttribute('applyBorder', '1');\n    }\n\n    if (model.alignment) {\n      xmlStream.addAttribute('applyAlignment', '1');\n      this.map.alignment.render(xmlStream, model.alignment);\n    }\n\n    xmlStream.closeNode();\n  },\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    // used during sax parsing of xml to build font object\n    switch (node.name) {\n      case 'xf':\n        this.model = {\n          numFmtId: parseInt(node.attributes.numFmtId, 10),\n          fontId: parseInt(node.attributes.fontId, 10),\n          fillId: parseInt(node.attributes.fillId, 10),\n          borderId: parseInt(node.attributes.borderId, 10),\n        };\n        if (this.xfId) {\n          this.model.xfId = parseInt(node.attributes.xfId, 10);\n        }\n        return true;\n      case 'alignment':\n        this.parser = this.map.alignment;\n        this.parser.parseOpen(node);\n        return true;\n      default:\n        return false;\n    }\n  },\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.alignment = this.parser.model;\n        this.parser = undefined;\n      }\n      return true;\n    }\n    return name !== 'xf';\n  },\n});\n"],"file":"style-xform.js"}
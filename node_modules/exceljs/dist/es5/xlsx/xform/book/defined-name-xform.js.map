{"version":3,"sources":["../../../../../lib/xlsx/xform/book/defined-name-xform.js"],"names":["utils","require","BaseXform","colCache","DefinedNamesXform","module","exports","inherits","render","xmlStream","model","openNode","name","localSheetId","writeText","ranges","join","closeNode","parseOpen","node","_parsedName","attributes","_parsedLocalSheetId","_parsedText","parseText","text","push","parseClose","extractRanges","undefined","parseInt","isValidRange","range","decodeEx","err","parsedText","quotesOpened","last","split","forEach","item","quotes","match","length","quotesEven"],"mappings":"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","file":"defined-name-xform.js","sourcesContent":["'use strict';\n\nvar utils = require('../../../utils/utils');\nvar BaseXform = require('../base-xform');\nvar colCache = require('../../../utils/col-cache');\n\nvar DefinedNamesXform = module.exports = function() {\n};\n\nutils.inherits(DefinedNamesXform, BaseXform, {\n  render: function(xmlStream, model) {\n    // <definedNames>\n    //   <definedName name=\"name\">name.ranges.join(',')</definedName>\n    //   <definedName name=\"_xlnm.Print_Area\" localSheetId=\"0\">name.ranges.join(',')</definedName>\n    // </definedNames>\n    xmlStream.openNode('definedName', {\n      name: model.name,\n      localSheetId: model.localSheetId\n    });\n    xmlStream.writeText(model.ranges.join(','));\n    xmlStream.closeNode();\n  },\n  parseOpen: function(node) {\n    switch (node.name) {\n      case 'definedName':\n        this._parsedName = node.attributes.name;\n        this._parsedLocalSheetId = node.attributes.localSheetId;\n        this._parsedText = [];\n        return true;\n      default:\n        return false;\n    }\n  },\n  parseText: function(text) {\n    this._parsedText.push(text);\n  },\n  parseClose: function() {\n    this.model = {\n      name: this._parsedName,\n      ranges: extractRanges(this._parsedText.join(''))\n    };\n    if (this._parsedLocalSheetId !== undefined) {\n      this.model.localSheetId = parseInt(this._parsedLocalSheetId, 10);\n    }\n    return false;\n  }\n});\n\nfunction isValidRange(range) {\n  try {\n    colCache.decodeEx(range);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction extractRanges(parsedText) {\n var ranges = [];\n var quotesOpened = false;\n var last = '';\n parsedText.split(',').forEach(function(item) {\n     if (!item) {\n       return;\n     }\n     var quotes = (item.match(/'/g) || []).length;\n\n         if (!quotes) {\n         if (quotesOpened) {\n             last += item + ',';\n           } else if (isValidRange(item)) {\n             ranges.push(item);\n           }\n         return;\n       }\n     var quotesEven = quotes % 2 === 0;\n\n         if (!quotesOpened && quotesEven && isValidRange(item)) {\n         ranges.push(item);\n       } else if (quotesOpened && !quotesEven) {\n         quotesOpened = false;\n         if (isValidRange(last + item)) {\n           ranges.push(last + item);\n         }\n         last = '';\n       } else {\n         quotesOpened = true;\n         last += item + ',';\n       }\n   });\n return ranges;\n}\n"]}
{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/phonetic-text-xform.js"],"names":["TextXform","require","RichTextXform","utils","BaseXform","PhoneticTextXform","module","exports","map","r","t","inherits","tag","render","xmlStream","model","openNode","sb","eb","hasOwnProperty","richText","forEach","text","closeNode","parseOpen","node","name","parser","parseInt","attributes","parseText","parseClose","rt","push","undefined"],"mappings":"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","sourcesContent":["'use strict';\n\nconst TextXform = require('./text-xform');\nconst RichTextXform = require('./rich-text-xform');\n\nconst utils = require('../../../utils/utils');\nconst BaseXform = require('../base-xform');\n\n// <rPh sb=\"0\" eb=\"1\">\n//   <t>(its pronounciation in KATAKANA)</t>\n// </rPh>\n\nconst PhoneticTextXform = (module.exports = function() {\n  this.map = {\n    r: new RichTextXform(),\n    t: new TextXform(),\n  };\n});\n\nutils.inherits(PhoneticTextXform, BaseXform, {\n  get tag() {\n    return 'rPh';\n  },\n\n  render(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      sb: model.sb || 0,\n      eb: model.eb || 0,\n    });\n    if (model && model.hasOwnProperty('richText') && model.richText) {\n      const { r } = this.map;\n      model.richText.forEach(text => {\n        r.render(xmlStream, text);\n      });\n    } else if (model) {\n      this.map.t.render(xmlStream, model.text);\n    }\n    xmlStream.closeNode();\n  },\n\n  parseOpen(node) {\n    const { name } = node;\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    if (name === this.tag) {\n      this.model = {\n        sb: parseInt(node.attributes.sb, 10),\n        eb: parseInt(node.attributes.eb, 10),\n      };\n      return true;\n    }\n    this.parser = this.map[name];\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    return false;\n  },\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        switch (name) {\n          case 'r': {\n            let rt = this.model.richText;\n            if (!rt) {\n              rt = this.model.richText = [];\n            }\n            rt.push(this.parser.model);\n            break;\n          }\n          case 't':\n            this.model.text = this.parser.model;\n            break;\n          default:\n            break;\n        }\n        this.parser = undefined;\n      }\n      return true;\n    }\n    switch (name) {\n      case this.tag:\n        return false;\n      default:\n        return true;\n    }\n  },\n});\n"],"file":"phonetic-text-xform.js"}
{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/shared-string-xform.js"],"names":["TextXform","require","RichTextXform","PhoneticTextXform","utils","BaseXform","SharedStringXform","module","exports","model","map","r","t","rPh","inherits","tag","render","xmlStream","openNode","hasOwnProperty","richText","forEach","text","undefined","closeNode","parseOpen","node","name","parser","parseText","parseClose","rt","push"],"mappings":"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","sourcesContent":["'use strict';\n\nconst TextXform = require('./text-xform');\nconst RichTextXform = require('./rich-text-xform');\nconst PhoneticTextXform = require('./phonetic-text-xform');\n\nconst utils = require('../../../utils/utils');\nconst BaseXform = require('../base-xform');\n\n// <si>\n//   <r></r><r></r>...\n// </si>\n// <si>\n//   <t></t>\n// </si>\n\nconst SharedStringXform = (module.exports = function(model) {\n  this.model = model;\n\n  this.map = {\n    r: new RichTextXform(),\n    t: new TextXform(),\n    rPh: new PhoneticTextXform(),\n  };\n});\n\nutils.inherits(SharedStringXform, BaseXform, {\n  get tag() {\n    return 'si';\n  },\n\n  render(xmlStream, model) {\n    xmlStream.openNode(this.tag);\n    if (model && model.hasOwnProperty('richText') && model.richText) {\n      const { r } = this.map;\n      model.richText.forEach(text => {\n        r.render(xmlStream, text);\n      });\n    } else if (model !== undefined && model !== null) {\n      this.map.t.render(xmlStream, model);\n    }\n    xmlStream.closeNode();\n  },\n\n  parseOpen(node) {\n    const { name } = node;\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    if (name === this.tag) {\n      this.model = {};\n      return true;\n    }\n    this.parser = this.map[name];\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    return false;\n  },\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        switch (name) {\n          case 'r': {\n            let rt = this.model.richText;\n            if (!rt) {\n              rt = this.model.richText = [];\n            }\n            rt.push(this.parser.model);\n            break;\n          }\n          case 't':\n            this.model = this.parser.model;\n            break;\n          default:\n            break;\n        }\n        this.parser = undefined;\n      }\n      return true;\n    }\n    switch (name) {\n      case this.tag:\n        return false;\n      default:\n        return true;\n    }\n  },\n});\n"],"file":"shared-string-xform.js"}
{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/shared-strings-xform.js"],"names":["utils","require","XmlStream","BaseXform","SharedStringXform","SharedStringsXform","module","exports","model","values","count","hash","rich","inherits","sharedStringXform","_sharedStringXform","uniqueCount","length","getString","index","add","value","richText","addRichText","addText","undefined","push","xml","toXml","render","xmlStream","_values","openXml","StdDocAttributes","openNode","xmlns","sx","forEach","sharedString","closeNode","parseOpen","node","parser","name","Error","JSON","stringify","parseText","text","parseClose"],"mappings":"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","sourcesContent":["'use strict';\n\nconst utils = require('../../../utils/utils');\nconst XmlStream = require('../../../utils/xml-stream');\nconst BaseXform = require('../base-xform');\nconst SharedStringXform = require('./shared-string-xform');\n\nconst SharedStringsXform = (module.exports = function(model) {\n  this.model = model || {\n    values: [],\n    count: 0,\n  };\n  this.hash = {};\n  this.rich = {};\n});\n\nutils.inherits(SharedStringsXform, BaseXform, {\n  get sharedStringXform() {\n    return this._sharedStringXform || (this._sharedStringXform = new SharedStringXform());\n  },\n\n  get values() {\n    return this.model.values;\n  },\n  get uniqueCount() {\n    return this.model.values.length;\n  },\n  get count() {\n    return this.model.count;\n  },\n\n  getString(index) {\n    return this.model.values[index];\n  },\n\n  add(value) {\n    return value.richText ? this.addRichText(value) : this.addText(value);\n  },\n  addText(value) {\n    let index = this.hash[value];\n    if (index === undefined) {\n      index = this.hash[value] = this.model.values.length;\n      this.model.values.push(value);\n    }\n    this.model.count++;\n    return index;\n  },\n  addRichText(value) {\n    // TODO: add WeakMap here\n    const xml = this.sharedStringXform.toXml(value);\n    let index = this.rich[xml];\n    if (index === undefined) {\n      index = this.rich[xml] = this.model.values.length;\n      this.model.values.push(value);\n    }\n    this.model.count++;\n    return index;\n  },\n\n  // <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  // <sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"<%=totalRefs%>\" uniqueCount=\"<%=count%>\">\n  //   <si><t><%=text%></t></si>\n  //   <si><r><rPr></rPr><t></t></r></si>\n  // </sst>\n\n  render(xmlStream, model) {\n    model = model || this._values;\n    xmlStream.openXml(XmlStream.StdDocAttributes);\n\n    xmlStream.openNode('sst', {\n      xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n      count: model.count,\n      uniqueCount: model.values.length,\n    });\n\n    const sx = this.sharedStringXform;\n    model.values.forEach(sharedString => {\n      sx.render(xmlStream, sharedString);\n    });\n    xmlStream.closeNode();\n  },\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case 'sst':\n        return true;\n      case 'si':\n        this.parser = this.sharedStringXform;\n        this.parser.parseOpen(node);\n        return true;\n      default:\n        throw new Error(`Unexpected xml node in parseOpen: ${JSON.stringify(node)}`);\n    }\n  },\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.values.push(this.parser.model);\n        this.model.count++;\n        this.parser = undefined;\n      }\n      return true;\n    }\n    switch (name) {\n      case 'sst':\n        return false;\n      default:\n        throw new Error(`Unexpected xml node in parseClose: ${name}`);\n    }\n  },\n});\n"],"file":"shared-strings-xform.js"}
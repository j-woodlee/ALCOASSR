{"version":3,"sources":["../../../../../lib/xlsx/xform/drawing/cell-position-xform.js"],"names":["utils","require","BaseXform","IntegerXform","CellPositionXform","module","exports","options","tag","map","zero","inherits","render","xmlStream","model","openNode","nativeCol","nativeColOff","nativeRow","nativeRowOff","closeNode","parseOpen","node","parser","name","reset","parseText","text","parseClose","undefined"],"mappings":"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","sourcesContent":["'use strict';\n\nconst utils = require('../../../utils/utils');\nconst BaseXform = require('../base-xform');\nconst IntegerXform = require('../simple/integer-xform');\n\nconst CellPositionXform = (module.exports = function(options) {\n  this.tag = options.tag;\n  this.map = {\n    'xdr:col': new IntegerXform({ tag: 'xdr:col', zero: true }),\n    'xdr:colOff': new IntegerXform({ tag: 'xdr:colOff', zero: true }),\n    'xdr:row': new IntegerXform({ tag: 'xdr:row', zero: true }),\n    'xdr:rowOff': new IntegerXform({ tag: 'xdr:rowOff', zero: true }),\n  };\n});\n\nutils.inherits(CellPositionXform, BaseXform, {\n  render(xmlStream, model) {\n    xmlStream.openNode(this.tag);\n\n    this.map['xdr:col'].render(xmlStream, model.nativeCol);\n    this.map['xdr:colOff'].render(xmlStream, model.nativeColOff);\n\n    this.map['xdr:row'].render(xmlStream, model.nativeRow);\n    this.map['xdr:rowOff'].render(xmlStream, model.nativeRowOff);\n\n    xmlStream.closeNode();\n  },\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case this.tag:\n        this.reset();\n        break;\n      default:\n        this.parser = this.map[node.name];\n        if (this.parser) {\n          this.parser.parseOpen(node);\n        }\n        break;\n    }\n    return true;\n  },\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.parser = undefined;\n      }\n      return true;\n    }\n    switch (name) {\n      case this.tag:\n        this.model = {\n          nativeCol: this.map['xdr:col'].model,\n          nativeColOff: this.map['xdr:colOff'].model,\n          nativeRow: this.map['xdr:row'].model,\n          nativeRowOff: this.map['xdr:rowOff'].model,\n        };\n        return false;\n      default:\n        // not quite sure how we get here!\n        return true;\n    }\n  },\n});\n"],"file":"cell-position-xform.js"}
{"version":3,"sources":["../../../../../lib/xlsx/xform/drawing/base-cell-anchor-xform.js"],"names":["utils","require","BaseXform","BaseCellAnchorXform","inherits","parseOpen","node","parser","name","tag","reset","model","range","editAs","attributes","map","parseText","text","reconcilePicture","options","rId","rel","rels","match","Target","mediaId","mediaIndex","media","undefined","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAW,CAAE,CAAzC;;AAEAH,KAAK,CAACI,QAAN,CAAeD,mBAAf,EAAoCD,SAApC,EAA+C;AAC7CG,EAAAA,SAD6C,qBACnCC,IADmC,EAC7B;AACd,QAAI,KAAKC,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYF,SAAZ,CAAsBC,IAAtB;AACA,aAAO,IAAP;AACD;;AACD,YAAQA,IAAI,CAACE,IAAb;AACE,WAAK,KAAKC,GAAV;AACE,aAAKC,KAAL;AACA,aAAKC,KAAL,GAAa;AACXC,UAAAA,KAAK,EAAE;AACLC,YAAAA,MAAM,EAAEP,IAAI,CAACQ,UAAL,CAAgBD,MAAhB,IAA0B;AAD7B;AADI,SAAb;AAKA;;AACF;AACE,aAAKN,MAAL,GAAc,KAAKQ,GAAL,CAAST,IAAI,CAACE,IAAd,CAAd;;AACA,YAAI,KAAKD,MAAT,EAAiB;AACf,eAAKA,MAAL,CAAYF,SAAZ,CAAsBC,IAAtB;AACD;;AACD;AAdJ;;AAgBA,WAAO,IAAP;AACD,GAvB4C;AAyB7CU,EAAAA,SAzB6C,qBAyBnCC,IAzBmC,EAyB7B;AACd,QAAI,KAAKV,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYS,SAAZ,CAAsBC,IAAtB;AACD;AACF,GA7B4C;AA+B7CC,EAAAA,gBA/B6C,4BA+B5BP,KA/B4B,EA+BrBQ,OA/BqB,EA+BZ;AAC/B,QAAIR,KAAK,IAAIA,KAAK,CAACS,GAAnB,EAAwB;AACtB,UAAMC,GAAG,GAAGF,OAAO,CAACG,IAAR,CAAaX,KAAK,CAACS,GAAnB,CAAZ;AACA,UAAMG,KAAK,GAAGF,GAAG,CAACG,MAAJ,CAAWD,KAAX,CAAiB,8BAAjB,CAAd;;AACA,UAAIA,KAAJ,EAAW;AACT,YAAMf,IAAI,GAAGe,KAAK,CAAC,CAAD,CAAlB;AACA,YAAME,OAAO,GAAGN,OAAO,CAACO,UAAR,CAAmBlB,IAAnB,CAAhB;AACA,eAAOW,OAAO,CAACQ,KAAR,CAAcF,OAAd,CAAP;AACD;AACF;;AACD,WAAOG,SAAP;AACD;AA1C4C,CAA/C;AA6CAC,MAAM,CAACC,OAAP,GAAiB3B,mBAAjB","sourcesContent":["'use strict';\n\nconst utils = require('../../../utils/utils');\nconst BaseXform = require('../base-xform');\n\nconst BaseCellAnchorXform = function() {};\n\nutils.inherits(BaseCellAnchorXform, BaseXform, {\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case this.tag:\n        this.reset();\n        this.model = {\n          range: {\n            editAs: node.attributes.editAs || 'oneCell',\n          },\n        };\n        break;\n      default:\n        this.parser = this.map[node.name];\n        if (this.parser) {\n          this.parser.parseOpen(node);\n        }\n        break;\n    }\n    return true;\n  },\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n\n  reconcilePicture(model, options) {\n    if (model && model.rId) {\n      const rel = options.rels[model.rId];\n      const match = rel.Target.match(/.*\\/media\\/(.+[.][a-z]{3,4})/);\n      if (match) {\n        const name = match[1];\n        const mediaId = options.mediaIndex[name];\n        return options.media[mediaId];\n      }\n    }\n    return undefined;\n  },\n});\n\nmodule.exports = BaseCellAnchorXform;\n"],"file":"base-cell-anchor-xform.js"}
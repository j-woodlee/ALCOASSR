{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/col-xform.js"],"names":["utils","require","BaseXform","ColXform","module","exports","inherits","tag","prepare","model","options","styleId","styles","addStyleModel","style","render","xmlStream","openNode","addAttribute","min","max","width","hidden","bestFit","outlineLevel","collapsed","closeNode","parseOpen","node","name","parseInt","attributes","undefined","parseFloat","parseText","parseClose","reconcile","getStyleModel"],"mappings":"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","sourcesContent":["'use strict';\n\nconst utils = require('../../../utils/utils');\nconst BaseXform = require('../base-xform');\n\nconst ColXform = (module.exports = function() {});\n\nutils.inherits(ColXform, BaseXform, {\n  get tag() {\n    return 'col';\n  },\n\n  prepare(model, options) {\n    const styleId = options.styles.addStyleModel(model.style || {});\n    if (styleId) {\n      model.styleId = styleId;\n    }\n  },\n\n  render(xmlStream, model) {\n    xmlStream.openNode('col');\n    xmlStream.addAttribute('min', model.min);\n    xmlStream.addAttribute('max', model.max);\n    if (model.width) {\n      xmlStream.addAttribute('width', model.width);\n    }\n    if (model.styleId) {\n      xmlStream.addAttribute('style', model.styleId);\n    }\n    if (model.hidden) {\n      xmlStream.addAttribute('hidden', '1');\n    }\n    if (model.bestFit) {\n      xmlStream.addAttribute('bestFit', '1');\n    }\n    if (model.outlineLevel) {\n      xmlStream.addAttribute('outlineLevel', model.outlineLevel);\n    }\n    if (model.collapsed) {\n      xmlStream.addAttribute('collapsed', '1');\n    }\n    xmlStream.addAttribute('customWidth', '1');\n    xmlStream.closeNode();\n  },\n\n  parseOpen(node) {\n    if (node.name === 'col') {\n      const model = (this.model = {\n        min: parseInt(node.attributes.min || '0', 10),\n        max: parseInt(node.attributes.max || '0', 10),\n        width: node.attributes.width === undefined ? undefined : parseFloat(node.attributes.width || '0'),\n      });\n      if (node.attributes.style) {\n        model.styleId = parseInt(node.attributes.style, 10);\n      }\n      if (node.attributes.hidden) {\n        model.hidden = true;\n      }\n      if (node.attributes.bestFit) {\n        model.bestFit = true;\n      }\n      if (node.attributes.outlineLevel) {\n        model.outlineLevel = parseInt(node.attributes.outlineLevel, 10);\n      }\n      if (node.attributes.collapsed) {\n        model.collapsed = true;\n      }\n      return true;\n    }\n    return false;\n  },\n  parseText() {},\n  parseClose() {\n    return false;\n  },\n\n  reconcile(model, options) {\n    // reconcile column styles\n    if (model.styleId) {\n      model.style = options.styles.getStyleModel(model.styleId);\n    }\n  },\n});\n"],"file":"col-xform.js"}
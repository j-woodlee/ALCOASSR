{"version":3,"sources":["../../../lib/doc/worksheet.js"],"names":["_","require","colCache","Range","Row","Column","Enums","Anchor","DataValidations","Worksheet","options","id","orderNo","name","state","_rows","_columns","_keys","_merges","rowBreaks","_workbook","workbook","properties","Object","assign","defaultRowHeight","dyDescent","outlineLevelCol","outlineLevelRow","pageSetup","margins","left","right","top","bottom","header","footer","orientation","horizontalDpi","verticalDpi","fitToPage","fitToWidth","fitToHeight","scale","pageOrder","blackAndWhite","draft","cellComments","errors","paperSize","undefined","showRowColHeaders","showGridLines","firstPageNumber","horizontalCentered","verticalCentered","colBreaks","dataValidations","views","autoFilter","_media","prototype","destroy","removeWorksheetEx","dimensions","forEach","row","rowDims","expand","number","min","max","columns","value","_headerRowCount","reduce","pv","cv","headerCount","headers","length","Math","count","column","push","defn","getColumnKey","key","setColumnKey","deleteColumnKey","eachColumnKey","f","each","getColumn","c","col","l2n","n","spliceColumns","start","i","inserts","Array","slice","call","arguments","rows","nRows","rowArguments","insert","getRow","splice","apply","r","nExpand","nKeep","nEnd","columnCount","maxCount","eachRow","cellCount","actualColumnCount","counts","eachCell","cell","_commitRow","_lastRowNumber","_nextRow","lastRow","findRow","rowCount","actualRowCount","addRow","values","addRows","spliceRows","rSrc","rDst","style","includeEmpty","colNumber","getCell","iteratee","hasValues","getSheetValues","findCell","address","getAddress","getCellEx","mergeCells","merge","intersects","Error","master","j","_unMergeMaster","unmerge","hasMerges","some","unMergeCells","type","ValueType","Merge","fillFormula","range","formula","results","decoded","decode","width","masterAddress","encodeAddress","getResult","isArray","first","result","sharedFormula","addImage","addImageToCells","imageId","tl","worksheet","br","getImages","filter","m","addBackgroundImage","getBackgroundImageId","map","tabColor","console","trace","model","media","cols","toModel","rowModel","merges","_parseRows","_parseMergeCells","fromModel","module","exports"],"mappings":"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","file":"worksheet.js","sourcesContent":["'use strict';\n\nconst _ = require('../utils/under-dash');\n\nconst colCache = require('./../utils/col-cache');\nconst Range = require('./range');\nconst Row = require('./row');\nconst Column = require('./column');\nconst Enums = require('./enums');\nconst Anchor = require('./anchor');\nconst DataValidations = require('./data-validations');\n\n// Worksheet requirements\n//  Operate as sheet inside workbook or standalone\n//  Load and Save from file and stream\n//  Access/Add/Delete individual cells\n//  Manage column widths and row heights\n\nconst Worksheet = function(options) {\n  options = options || {};\n\n  // in a workbook, each sheet will have a number\n  this.id = options.id;\n  this.orderNo = options.orderNo;\n\n  // and a name\n  this.name = options.name || 'Sheet' + this.id;\n\n  // add a state\n  this.state = options.state || 'visible';\n\n  // rows allows access organised by row. Sparse array of arrays indexed by row-1, col\n  // Note: _rows is zero based. Must subtract 1 to go from cell.row to index\n  this._rows = [];\n\n  // column definitions\n  this._columns = null;\n\n  // column keys (addRow convenience): key ==> this._collumns index\n  this._keys = {};\n\n  // keep record of all merges\n  this._merges = {};\n\n  // record of all row and column pageBreaks\n  this.rowBreaks = [];\n\n  this._workbook = options.workbook;\n\n  // for tabColor, default row height, outline levels, etc\n  this.properties = Object.assign({}, {\n    defaultRowHeight: 15,\n    dyDescent: 55,\n    outlineLevelCol: 0,\n    outlineLevelRow: 0\n  }, options.properties);\n\n  // for all things printing\n  this.pageSetup = Object.assign({}, {\n    margins: {left: 0.7, right: 0.7, top: 0.75, bottom: 0.75, header: 0.3, footer: 0.3 },\n    orientation: 'portrait',\n    horizontalDpi: 4294967295,\n    verticalDpi: 4294967295,\n    fitToPage: !!(options.pageSetup && ((options.pageSetup.fitToWidth || options.pageSetup.fitToHeight) && !options.pageSetup.scale)),\n    pageOrder: 'downThenOver',\n    blackAndWhite: false,\n    draft: false,\n    cellComments: 'None',\n    errors: 'displayed',\n    scale: 100,\n    fitToWidth: 1,\n    fitToHeight: 1,\n    paperSize: undefined,\n    showRowColHeaders: false,\n    showGridLines: false,\n    firstPageNumber: undefined,\n    horizontalCentered: false,\n    verticalCentered: false,\n    rowBreaks: null,\n    colBreaks: null\n  }, options.pageSetup);\n\n  this.dataValidations = new DataValidations();\n\n  // for freezepanes, split, zoom, gridlines, etc\n  this.views = options.views || [];\n\n  this.autoFilter = options.autoFilter || null;\n\n  // for images, etc\n  this._media = [];\n};\n\nWorksheet.prototype = {\n\n  get workbook() {\n    return this._workbook;\n  },\n\n  // when you're done with this worksheet, call this to remove from workbook\n  destroy: function() {\n    this._workbook.removeWorksheetEx(this);\n  },\n\n  // Get the bounding range of the cells in this worksheet\n  get dimensions() {\n    const dimensions = new Range();\n    this._rows.forEach(function(row) {\n      if (row) {\n        const rowDims = row.dimensions;\n        if (rowDims) {\n          dimensions.expand(row.number, rowDims.min, row.number, rowDims.max);\n        }\n      }\n    });\n    return dimensions;\n  },\n\n  // =========================================================================\n  // Columns\n\n  // get the current columns array.\n  get columns() {\n    return this._columns;\n  },\n\n  // set the columns from an array of column definitions.\n  // Note: any headers defined will overwrite existing values.\n  set columns(value) {\n    // calculate max header row count\n    this._headerRowCount = value.reduce((pv, cv) => {\n      const headerCount =\n        (cv.header && 1) ||\n        (cv.headers && cv.headers.length) ||\n        0;\n      return Math.max(pv, headerCount);\n    }, 0);\n\n    // construct Column objects\n    let count = 1;\n    const columns = this._columns = [];\n    value.forEach(defn => {\n      const column = new Column(this, count++, false);\n      columns.push(column);\n      column.defn = defn;\n    });\n  },\n\n  getColumnKey(key) {\n    return this._keys[key];\n  },\n  setColumnKey(key, value) {\n    this._keys[key] = value;\n  },\n  deleteColumnKey(key) {\n    delete this._keys[key];\n  },\n  eachColumnKey(f) {\n    _.each(this._keys, f);\n  },\n\n  // get a single column by col number. If it doesn't exist, create it and any gaps before it\n  getColumn: function(c) {\n    if (typeof c === 'string') {\n      // if it matches a key'd column, return that\n      const col = this._keys[c];\n      if (col) return col;\n\n      // otherwise, assume letter\n      c = colCache.l2n(c);\n    }\n    if (!this._columns) { this._columns = []; }\n    if (c > this._columns.length) {\n      let n = this._columns.length + 1;\n      while (n <= c) {\n        this._columns.push(new Column(this, n++));\n      }\n    }\n    return this._columns[c - 1];\n  },\n  spliceColumns: function(start, count) {\n    // each member of inserts is a column of data.\n    let i;\n    const inserts = Array.prototype.slice.call(arguments, 2);\n    const rows = this._rows;\n    const nRows = rows.length;\n    if (inserts.length > 0) {\n      // must iterate over all rows whether they exist yet or not\n      for (i = 0; i < nRows; i++) {\n        const rowArguments = [start, count];\n        inserts.forEach(function(insert) { // eslint-disable-line no-loop-func\n          rowArguments.push(insert[i] || null);\n        });\n        const row = this.getRow(i + 1);\n        // eslint-disable-next-line prefer-spread\n        row.splice.apply(row, rowArguments);\n      }\n    } else {\n      // nothing to insert, so just splice all rows\n      this._rows.forEach(function(r, i) {\n        if (r) {\n          r.splice(start, count);\n        }\n      });\n    }\n\n    // splice column definitions\n    const nExpand = inserts.length - count;\n    const nKeep = start + count;\n    const nEnd = this._columns.length;\n    if (nExpand < 0) {\n      for (i = start + inserts.length; i <= nEnd; i++) {\n        this.getColumn(i).defn = this.getColumn(i - nExpand).defn;\n      }\n    } else if (nExpand > 0) {\n      for (i = nEnd; i >= nKeep; i--) {\n        this.getColumn(i + nExpand).defn = this.getColumn(i).defn;\n      }\n    }\n    for (i = start; i < start + inserts.length; i++) {\n      this.getColumn(i).defn = null;\n    }\n  },\n\n  get columnCount() {\n    let maxCount = 0;\n    this.eachRow(function(row) {\n      maxCount = Math.max(maxCount, row.cellCount);\n    });\n    return maxCount;\n  },\n  get actualColumnCount() {\n    // performance nightmare - for each row, counts all the columns used\n    const counts = [];\n    let count = 0;\n    this.eachRow(function(row) {\n      row.eachCell(function(cell) {\n        const col = cell.col;\n        if (!counts[col]) {\n          counts[col] = true;\n          count++;\n        }\n      });\n    });\n    return count;\n  },\n\n\n  // =========================================================================\n  // Rows\n\n  _commitRow: function() {\n    // nop - allows streaming reader to fill a document\n  },\n\n  get _lastRowNumber() {\n    // need to cope with results of splice\n    const rows = this._rows;\n    let n = rows.length;\n    while ((n > 0) && (rows[n - 1] === undefined)) {\n      n--;\n    }\n    return n;\n  },\n  get _nextRow() {\n    return this._lastRowNumber + 1;\n  },\n\n  get lastRow() {\n    if (this._rows.length) {\n      return this._rows[this._rows.length - 1];\n    }\n    return undefined;\n  },\n\n  // find a row (if exists) by row number\n  findRow: function(r) {\n    return this._rows[r - 1];\n  },\n\n  get rowCount() {\n    return this._lastRowNumber;\n  },\n  get actualRowCount() {\n    // counts actual rows that have actual data\n    let count = 0;\n    this.eachRow(function() {\n      count++;\n    });\n    return count;\n  },\n\n  // get a row by row number.\n  getRow: function(r) {\n    let row = this._rows[r - 1];\n    if (!row) {\n      row = this._rows[r - 1] = new Row(this, r);\n    }\n    return row;\n  },\n  addRow: function(value) {\n    const row = this.getRow(this._nextRow);\n    row.values = value;\n    return row;\n  },\n  addRows: function(value) {\n    value.forEach(row => {\n      this.addRow(row);\n    });\n  },\n\n  spliceRows: function(start, count) {\n    // same problem as row.splice, except worse.\n    const inserts = Array.prototype.slice.call(arguments, 2);\n    const nKeep = start + count;\n    const nExpand = inserts.length - count;\n    const nEnd = this._rows.length;\n    let i, rSrc;\n    if (nExpand < 0) {\n      // remove rows\n      for (i = nKeep; i <= nEnd; i++) {\n        rSrc = this._rows[i - 1];\n        if (rSrc) {\n          const rDst = this.getRow(i + nExpand);\n          rDst.values = rSrc.values;\n          rDst.style = rSrc.style;\n          // eslint-disable-next-line no-loop-func\n          rSrc.eachCell({ includeEmpty: true }, (cell, colNumber) => {\n            rDst.getCell(colNumber).style = cell.style;\n          });\n          this._rows[i - 1] = undefined;\n        } else {\n          this._rows[(i + nExpand) - 1] = undefined;\n        }\n      }\n    } else if (nExpand > 0) {\n      // insert new cells\n      for (i = nEnd; i >= nKeep; i--) {\n        rSrc = this._rows[i - 1];\n        if (rSrc) {\n          const rDst = this.getRow(i + nExpand);\n          rDst.values = rSrc.values;\n          rDst.style = rSrc.style;\n          // eslint-disable-next-line no-loop-func\n          rSrc.eachCell({ includeEmpty: true }, (cell, colNumber) => {\n            rDst.getCell(colNumber).style = cell.style;\n          });\n        } else {\n          this._rows[(i + nExpand) - 1] = undefined;\n        }\n      }\n    }\n\n    // now copy over the new values\n    for (i = 0; i < inserts.length; i++) {\n      const rDst = this.getRow(start + i);\n      rDst.style = {};\n      rDst.values = inserts[i];\n    }\n  },\n\n  // iterate over every row in the worksheet, including maybe empty rows\n  eachRow: function(options, iteratee) {\n    if (!iteratee) {\n      iteratee = options;\n      options = undefined;\n    }\n    if (options && options.includeEmpty) {\n      const n = this._rows.length;\n      for (let i = 1; i <= n; i++) {\n        iteratee(this.getRow(i), i);\n      }\n    } else {\n      this._rows.forEach(row => {\n        if (row && row.hasValues) {\n          iteratee(row, row.number);\n        }\n      });\n    }\n  },\n\n  // return all rows as sparse array\n  getSheetValues: function() {\n    const rows = [];\n    this._rows.forEach(function(row) {\n      if (row) { rows[row.number] = row.values; }\n    });\n    return rows;\n  },\n\n  // =========================================================================\n  // Cells\n\n  // returns the cell at [r,c] or address given by r. If not found, return undefined\n  findCell: function(r, c) {\n    const address = colCache.getAddress(r, c);\n    const row = this._rows[address.row - 1];\n    return row ? row.findCell(address.col) : undefined;\n  },\n\n  // return the cell at [r,c] or address given by r. If not found, create a new one.\n  getCell: function(r, c) {\n    const address = colCache.getAddress(r, c);\n    const row = this.getRow(address.row);\n    return row.getCellEx(address);\n  },\n\n  // =========================================================================\n  // Merge\n\n  // convert the range defined by ['tl:br'], [tl,br] or [t,l,b,r] into a single 'merged' cell\n  mergeCells: function() {\n    const dimensions = new Range(Array.prototype.slice.call(arguments, 0)); // convert arguments into Array\n\n    // check cells aren't already merged\n    _.each(this._merges, function(merge) {\n      if (merge.intersects(dimensions)) {\n        throw new Error('Cannot merge already merged cells');\n      }\n    });\n\n    // apply merge\n    const master = this.getCell(dimensions.top, dimensions.left);\n    for (let i = dimensions.top; i <= dimensions.bottom; i++) {\n      for (let j = dimensions.left; j <= dimensions.right; j++) {\n        // merge all but the master cell\n        if ((i > dimensions.top) || (j > dimensions.left)) {\n          this.getCell(i, j).merge(master);\n        }\n      }\n    }\n\n    // index merge\n    this._merges[master.address] = dimensions;\n  },\n  _unMergeMaster: function(master) {\n    // master is always top left of a rectangle\n    const merge = this._merges[master.address];\n    if (merge) {\n      for (let i = merge.top; i <= merge.bottom; i++) {\n        for (let j = merge.left; j <= merge.right; j++) {\n          this.getCell(i, j).unmerge();\n        }\n      }\n      delete this._merges[master.address];\n    }\n  },\n\n  get hasMerges() {\n    return _.some(this._merges, function() {\n      // TODO: this doesn't look right\n      return true;\n    });\n  },\n\n  // scan the range defined by ['tl:br'], [tl,br] or [t,l,b,r] and if any cell is part of a merge,\n  // un-merge the group. Note this function can affect multiple merges and merge-blocks are\n  // atomic - either they're all merged or all un-merged.\n  unMergeCells: function() {\n    const dimensions = new Range(Array.prototype.slice.call(arguments, 0)); // convert arguments into Array\n\n    // find any cells in that range and unmerge them\n    for (let i = dimensions.top; i <= dimensions.bottom; i++) {\n      for (let j = dimensions.left; j <= dimensions.right; j++) {\n        const cell = this.findCell(i, j);\n        if (cell) {\n          if (cell.type === Enums.ValueType.Merge) {\n            // this cell merges to another master\n            this._unMergeMaster(cell.master);\n          } else if (this._merges[cell.address]) {\n            // this cell is a master\n            this._unMergeMaster(cell);\n          }\n        }\n      }\n    }\n  },\n\n  // ===========================================================================\n  // Shared Formula\n  fillFormula: function(range, formula, results) {\n    // Define formula for top-left cell and share to rest\n    const decoded = colCache.decode(range);\n    const { top, left, bottom, right } = decoded;\n    const width = (right - left) + 1;\n    const masterAddress = colCache.encodeAddress(top, left);\n\n    // work out result accessor\n    let getResult;\n    if (typeof results === 'function') {\n      getResult = results;\n    } else if (Array.isArray(results)) {\n      if (Array.isArray(results[0])) {\n        getResult = (row, col) => results[row - top][col - left];\n      } else {\n        getResult = (row, col) => results[((row - top) * width) + (col - left)];\n      }\n    } else {\n      getResult = () => undefined;\n    }\n    let first = true;\n    for (let r = top; r <= bottom; r++) {\n      for (let c = left; c <= right; c++) {\n        if (first) {\n          this.getCell(r, c).value = {\n            formula,\n            result: getResult(r, c),\n          };\n          first = false;\n        } else {\n          this.getCell(r, c).value = {\n            sharedFormula: masterAddress,\n            result: getResult(r, c),\n          };\n        }\n      }\n    }\n  },\n\n\n  // =========================================================================\n  // Images\n  addImage: function addImageToCells(imageId, range) {\n    if (range.tl && !(range.tl instanceof Anchor)) {\n      range.tl = new Anchor(range.tl);\n      range.tl.worksheet = this;\n    }\n\n    if (range.br && !(range.br instanceof Anchor)) {\n      range.br = new Anchor(range.br);\n      range.br.worksheet = this;\n    }\n\n    this._media.push({\n      type: 'image',\n      imageId,\n      range,\n    });\n  },\n\n  getImages() {\n    return this._media\n      .filter(m => m.type === 'image');\n  },\n\n  addBackgroundImage: function(imageId) {\n    this._media.push({\n      type: 'background',\n      imageId,\n    });\n  },\n\n  getBackgroundImageId() {\n    return this._media\n      .filter(m => m.type === 'background')\n      .map(m => m.imageId)[0];\n  },\n\n  // ===========================================================================\n  // Deprecated\n  get tabColor() {\n    // eslint-disable-next-line no-console\n    console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');\n    return this.properties.tabColor;\n  },\n  set tabColor(value) {\n    // eslint-disable-next-line no-console\n    console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');\n    this.properties.tabColor = value;\n  },\n\n  // ===========================================================================\n  // Model\n\n  get model() {\n    const model = {\n      id: this.id,\n      name: this.name,\n      dataValidations: this.dataValidations.model,\n      properties: this.properties,\n      state: this.state,\n      pageSetup: this.pageSetup,\n      rowBreaks: this.rowBreaks,\n      views: this.views,\n      autoFilter: this.autoFilter,\n      media: this._media,\n    };\n\n    // =================================================\n    // columns\n    model.cols = Column.toModel(this.columns);\n\n    // ==========================================================\n    // Rows\n    const rows = model.rows = [];\n    const dimensions = model.dimensions = new Range();\n    this._rows.forEach(function(row) {\n      const rowModel = row && row.model;\n      if (rowModel) {\n        dimensions.expand(rowModel.number, rowModel.min, rowModel.number, rowModel.max);\n        rows.push(rowModel);\n      }\n    });\n\n    // ==========================================================\n    // Merges\n    model.merges = [];\n    _.each(this._merges, function(merge) {\n      model.merges.push(merge.range);\n    });\n\n    return model;\n  },\n  _parseRows: function(model) {\n    this._rows = [];\n    model.rows.forEach(rowModel => {\n      const row = new Row(this, rowModel.number);\n      this._rows[row.number - 1] = row;\n      row.model = rowModel;\n    });\n  },\n  _parseMergeCells: function(model) {\n    _.each(model.mergeCells, merge => {\n      this.mergeCells(merge);\n    });\n  },\n  set model(value) {\n    this.name = value.name;\n    this._columns = Column.fromModel(this, value.cols);\n    this._parseRows(value);\n\n    this._parseMergeCells(value);\n    this.dataValidations = new DataValidations(value.dataValidations);\n    this.properties = value.properties;\n    this.pageSetup = value.pageSetup;\n    this.views = value.views;\n    this.autoFilter = value.autoFilter;\n    this._media = value.media;\n\n    this._media\n      .filter(m => m.type === 'image' && typeof m.range !== 'string')\n      .forEach(i => {\n        i.range.tl.worksheet = this;\n        i.range.br.worksheet = this;\n      })\n  }\n};\n\nmodule.exports = Worksheet;"]}
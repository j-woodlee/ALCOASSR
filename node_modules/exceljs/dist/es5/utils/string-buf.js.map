{"version":3,"sources":["../../../lib/utils/string-buf.js"],"names":["StringBuf","module","exports","options","_buf","Buffer","size","_encoding","encoding","_inPos","_buffer","undefined","prototype","length","capacity","buffer","toBuffer","copy","reset","position","_grow","min","buf","addText","text","inPos","write","addStringBuf","inBuf"],"mappings":"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","sourcesContent":["'use strict';\n\n// StringBuf - a way to keep string memory operations to a minimum\n// while building the strings for the xml files\nconst StringBuf = (module.exports = function(options) {\n  this._buf = new Buffer((options && options.size) || 16384);\n  this._encoding = (options && options.encoding) || 'utf8';\n\n  // where in the buffer we are at\n  this._inPos = 0;\n\n  // for use by toBuffer()\n  this._buffer = undefined;\n});\n\nStringBuf.prototype = {\n  get length() {\n    return this._inPos;\n  },\n  get capacity() {\n    return this._buf.length;\n  },\n  get buffer() {\n    return this._buf;\n  },\n\n  toBuffer() {\n    // return the current data as a single enclosing buffer\n    if (!this._buffer) {\n      this._buffer = new Buffer(this.length);\n      this._buf.copy(this._buffer, 0, 0, this.length);\n    }\n    return this._buffer;\n  },\n\n  reset(position) {\n    position = position || 0;\n    this._buffer = undefined;\n    this._inPos = position;\n  },\n\n  _grow(min) {\n    let size = this._buf.length * 2;\n    while (size < min) {\n      size *= 2;\n    }\n    const buf = new Buffer(size);\n    this._buf.copy(buf, 0);\n    this._buf = buf;\n  },\n\n  addText(text) {\n    this._buffer = undefined;\n\n    let inPos = this._inPos + this._buf.write(text, this._inPos, this._encoding);\n\n    // if we've hit (or nearing capacity), grow the buf\n    while (inPos >= this._buf.length - 4) {\n      this._grow(this._inPos + text.length);\n\n      // keep trying to write until we've completely written the text\n      inPos = this._inPos + this._buf.write(text, this._inPos, this._encoding);\n    }\n\n    this._inPos = inPos;\n  },\n\n  addStringBuf(inBuf) {\n    if (inBuf.length) {\n      this._buffer = undefined;\n\n      if (this.length + inBuf.length > this.capacity) {\n        this._grow(this.length + inBuf.length);\n      }\n      // eslint-disable-next-line no-underscore-dangle\n      inBuf._buf.copy(this._buf, this._inPos, 0, inBuf.length);\n      this._inPos += inBuf.length;\n    }\n  },\n};\n"],"file":"string-buf.js"}
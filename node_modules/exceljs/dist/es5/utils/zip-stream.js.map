{"version":3,"sources":["../../../lib/utils/zip-stream.js"],"names":["events","require","JSZip","PromiseLib","utils","StreamBuf","ZipReader","options","count","jsZip","stream","on","_process","getEntryType","inherits","EventEmitter","_finished","Promise","resolve","then","emit","content","read","loadAsync","zip","forEach","path","entry","dir","async","data","entryStream","write","autodrain","error","encoding","callback","cork","uncork","end","destroy","ZipWriter","append","hasOwnProperty","base64","file","name","finalize","type","compression","generateAsync","size","setEncoding","pause","resume","isPaused","pipe","destination","unpipe","unshift","chunk","wrap","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// The purpose of this module is to wrap the js-zip library into a streaming zip library\n// since most of the exceljs code uses streams.\n// One day I might find (or build) a properly streaming browser safe zip lib\n\nconst events = require('events');\nconst JSZip = require('jszip');\nconst PromiseLib = require('./promise');\n\nconst utils = require('./utils');\nconst StreamBuf = require('./stream-buf');\n\n// =============================================================================\n// The ZipReader class\n// Unpacks an incoming zip stream\nconst ZipReader = function(options) {\n  this.count = 0;\n  this.jsZip = new JSZip();\n  this.stream = new StreamBuf();\n  this.stream.on('finish', () => {\n    this._process();\n  });\n  this.getEntryType = options.getEntryType || (() => 'string');\n};\n\nutils.inherits(ZipReader, events.EventEmitter, {\n  _finished() {\n    if (!--this.count) {\n      PromiseLib.Promise.resolve().then(() => {\n        this.emit('finished');\n      });\n    }\n  },\n  _process() {\n    const content = this.stream.read();\n    this.jsZip\n      .loadAsync(content)\n      .then(zip => {\n        zip.forEach((path, entry) => {\n          if (!entry.dir) {\n            this.count++;\n            entry\n              .async(this.getEntryType(path))\n              .then(data => {\n                const entryStream = new StreamBuf();\n                entryStream.path = path;\n                entryStream.write(data);\n                entryStream.autodrain = () => {\n                  this._finished();\n                };\n                entryStream.on('finish', () => {\n                  this._finished();\n                });\n\n                this.emit('entry', entryStream);\n              })\n              .catch(error => {\n                this.emit('error', error);\n              });\n          }\n        });\n      })\n      .catch(error => {\n        this.emit('error', error);\n      });\n  },\n\n  // ==========================================================================\n  // Stream.Writable interface\n  write(data, encoding, callback) {\n    if (this.error) {\n      if (callback) {\n        callback(this.error);\n      }\n      throw this.error;\n    } else {\n      return this.stream.write(data, encoding, callback);\n    }\n  },\n  cork() {\n    return this.stream.cork();\n  },\n  uncork() {\n    return this.stream.uncork();\n  },\n  end() {\n    return this.stream.end();\n  },\n  destroy(error) {\n    this.emit('finished');\n    this.error = error;\n  },\n});\n\n// =============================================================================\n// The ZipWriter class\n// Packs streamed data into an output zip stream\nconst ZipWriter = function() {\n  this.zip = new JSZip();\n  this.stream = new StreamBuf();\n};\n\nutils.inherits(ZipWriter, events.EventEmitter, {\n  append(data, options) {\n    if (options.hasOwnProperty('base64') && options.base64) {\n      this.zip.file(options.name, data, { base64: true });\n    } else {\n      this.zip.file(options.name, data);\n    }\n  },\n  finalize() {\n    const options = {\n      type: 'nodebuffer',\n      compression: 'DEFLATE',\n    };\n    return this.zip.generateAsync(options).then(content => {\n      this.stream.end(content);\n      this.emit('finish');\n    });\n  },\n\n  // ==========================================================================\n  // Stream.Readable interface\n  read(size) {\n    return this.stream.read(size);\n  },\n  setEncoding(encoding) {\n    return this.stream.setEncoding(encoding);\n  },\n  pause() {\n    return this.stream.pause();\n  },\n  resume() {\n    return this.stream.resume();\n  },\n  isPaused() {\n    return this.stream.isPaused();\n  },\n  pipe(destination, options) {\n    return this.stream.pipe(\n      destination,\n      options\n    );\n  },\n  unpipe(destination) {\n    return this.stream.unpipe(destination);\n  },\n  unshift(chunk) {\n    return this.stream.unshift(chunk);\n  },\n  wrap(stream) {\n    return this.stream.wrap(stream);\n  },\n});\n\n// =============================================================================\n\nmodule.exports = {\n  ZipReader,\n  ZipWriter,\n};\n"],"file":"zip-stream.js"}
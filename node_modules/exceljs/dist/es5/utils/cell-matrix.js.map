{"version":3,"sources":["../../../lib/utils/cell-matrix.js"],"names":["_","require","colCache","CellMatrix","template","sheets","prototype","addCell","addressStr","addCellEx","decodeEx","getCell","findCellEx","findCell","findCellAt","sheetName","rowNumber","colNumber","sheet","row","address","top","bottom","col","left","right","getCellAt","getCellEx","create","findSheet","findSheetRow","findRowCell","cell","n2l","removeCellEx","forEachInSheet","callback","forEach","each","map","results","push","name","undefined","Object","assign","JSON","parse","stringify","spliceRows","start","numDelete","numInsert","inserts","i","splice","spliceColumns","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('./under-dash');\nconst colCache = require('./col-cache');\n\nconst CellMatrix = function(template) {\n  this.template = template;\n  this.sheets = {};\n};\n\nCellMatrix.prototype = {\n  addCell(addressStr) {\n    this.addCellEx(colCache.decodeEx(addressStr));\n  },\n  getCell(addressStr) {\n    return this.findCellEx(colCache.decodeEx(addressStr), true);\n  },\n  findCell(addressStr) {\n    return this.findCellEx(colCache.decodeEx(addressStr), false);\n  },\n\n  findCellAt(sheetName, rowNumber, colNumber) {\n    const sheet = this.sheets[sheetName];\n    const row = sheet && sheet[rowNumber];\n    return row && row[colNumber];\n  },\n  addCellEx(address) {\n    if (address.top) {\n      for (let row = address.top; row <= address.bottom; row++) {\n        for (let col = address.left; col <= address.right; col++) {\n          this.getCellAt(address.sheetName, row, col);\n        }\n      }\n    } else {\n      this.findCellEx(address, true);\n    }\n  },\n  getCellEx(address) {\n    return this.findCellEx(address, true);\n  },\n  findCellEx(address, create) {\n    const sheet = this.findSheet(address, create);\n    const row = this.findSheetRow(sheet, address, create);\n    return this.findRowCell(row, address, create);\n  },\n  getCellAt(sheetName, rowNumber, colNumber) {\n    const sheet = this.sheets[sheetName] || (this.sheets[sheetName] = []);\n    const row = sheet[rowNumber] || (sheet[rowNumber] = []);\n    const cell =\n      row[colNumber] ||\n      (row[colNumber] = {\n        sheetName,\n        address: colCache.n2l(colNumber) + rowNumber,\n        row: rowNumber,\n        col: colNumber,\n      });\n    return cell;\n  },\n\n  removeCellEx(address) {\n    const sheet = this.findSheet(address);\n    if (!sheet) {\n      return;\n    }\n    const row = this.findSheetRow(sheet, address);\n    if (!row) {\n      return;\n    }\n    delete row[address.col];\n  },\n\n  forEachInSheet(sheetName, callback) {\n    const sheet = this.sheets[sheetName];\n    if (sheet) {\n      sheet.forEach((row, rowNumber) => {\n        if (row) {\n          row.forEach((cell, colNumber) => {\n            if (cell) {\n              callback(cell, rowNumber, colNumber);\n            }\n          });\n        }\n      });\n    }\n  },\n  forEach(callback) {\n    _.each(this.sheets, (sheet, sheetName) => {\n      this.forEachInSheet(sheetName, callback);\n    });\n  },\n  map(callback) {\n    const results = [];\n    this.forEach(cell => {\n      results.push(callback(cell));\n    });\n    return results;\n  },\n\n  findSheet(address, create) {\n    const name = address.sheetName;\n    if (this.sheets[name]) {\n      return this.sheets[name];\n    }\n    if (create) {\n      return (this.sheets[name] = []);\n    }\n    return undefined;\n  },\n  findSheetRow(sheet, address, create) {\n    const { row } = address;\n    if (sheet && sheet[row]) {\n      return sheet[row];\n    }\n    if (create) {\n      return (sheet[row] = []);\n    }\n    return undefined;\n  },\n  findRowCell(row, address, create) {\n    const { col } = address;\n    if (row && row[col]) {\n      return row[col];\n    }\n    if (create) {\n      return (row[col] = this.template ? Object.assign(address, JSON.parse(JSON.stringify(this.template))) : address);\n    }\n    return undefined;\n  },\n\n  spliceRows(sheetName, start, numDelete, numInsert) {\n    const sheet = this.sheets[sheetName];\n    if (sheet) {\n      const inserts = [];\n      for (let i = 0; i < numInsert; i++) {\n        inserts.push([]);\n      }\n      sheet.splice(start, numDelete, ...inserts);\n    }\n  },\n  spliceColumns(sheetName, start, numDelete, numInsert) {\n    const sheet = this.sheets[sheetName];\n    if (sheet) {\n      const inserts = [];\n      for (let i = 0; i < numInsert; i++) {\n        inserts.push(null);\n      }\n      _.each(sheet, row => {\n        row.splice(start, numDelete, ...inserts);\n      });\n    }\n  },\n};\n\nmodule.exports = CellMatrix;\n"],"file":"cell-matrix.js"}